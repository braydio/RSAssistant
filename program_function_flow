MAIN: TO RECORD UPDATES FROM AUTO-RSA AND LOG TO CSV
TODO: Finish my function map lol


initialize bot in orderFlowbot.py
└── watches for order updates
    ├── on message
    │   ├── checks message embeds and calls
    │   │     └── process_embed.py
    │   │           └── parse data in message and calls
    │   ├── checks content and calls
    │   │     └── process_content.py
    │   │           └── parse data in message and calls
    │   │                 └──        

 > FOR watch_utils:    

watch_ticker(ctx, ticker)                                       # Main function in watch_utils.py
    ├── load_watch_list()                                       # Load existing watchlist (watch_utils.py)
    ├── update_watchlist_with_stock(ticker)                     # Add stock to watchlist (watch_utils.py)
    │   ├── add_stock_to_excel_log(ticker, excel_file_path)     # Log new stock to Excel (excel_utils.py)
    ├── save_watch_list()                                       # Save updated watchlist (watch_utils.py)
    └── load_account_mappings()                             # Load account mappings (from config_utils.py)

list_watched_tickers(ctx)                                   # Main function in watch_utils.py
    ├── load_watch_list()                                   # Load existing watchlist (watch_utils.py)
    └── send_chunked_message(ctx, message)                  # Send response (watch_utils.py)

get_watch_status(ctx, ticker)                               # Main function in watch_utils.py
    ├── load_watch_list()                                   # Load existing watchlist (watch_utils.py)
    ├── load_account_mappings()                             # Load account mappings (config_utils.py)
    └── send_chunked_message(ctx, message)                  # Send response (watch_utils.py)

track_ticker_progress(ctx, ticker)                          # Main function in watch_utils.py
    ├── load_watch_list()                                   # Load existing watchlist (watch_utils.py)
    └── send_chunked_message(ctx, message)                  # Send response (watch_utils.py)

stop_watching(ctx, ticker)                          # Main function in watch_utils.py
    ├── load_watch_list()                           # Load existing watchlist (watch_utils.py)
    ├── save_watch_list()                           # Save updated watchlist (watch_utils.py)
    └── send_chunked_message(ctx, message)          # Send response (watch_utils.py)

update_watch_list(broker, account_number, stock, action)    # Helper in watch_utils.py
    ├── load_watch_list()                                   # Load existing watchlist (watch_utils.py)
    ├── load_account_mappings()                             # Load account mappings (config_utils.py)
    └── save_watch_list()                                   # Save updated watchlist (watch_utils.py)

# Utility Functions Support in Other Modules

add_stock_to_excel_log(ticker, excel_file_path)           # Logs stock to Excel (excel_utils.py)

save_order_to_csv(broker_name, account_number, order_type, quantity, stock)  # Save orders to CSV (csv_utils.py)

get_last_stock_price(stock)                               # Fetch stock prices for updates (csv_utils.py)

parse_order_message(message_content)                      # Parse order messages (parsing_utils.py)

parse_embed_message(embed, holdings_data)                 # Parse embed data (parsing_utils.py)

@bot.commande(name='broker')
{
..broker webull:
        Webull - Broker Summary
        $497.61 in 4 Accounts 
        ===========================
        | Account: Margin Account: $108.05
        | Account: Cash Account: $123.49
        | Account: IRA: $133.90
        | Account: Roth IRA: $132.17    }